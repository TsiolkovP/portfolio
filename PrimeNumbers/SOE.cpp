#include "SOE.h"

#include <cstdlib>

// Алгоритм Решето Эратосфена.
/*1. Возьмем набор чисел от 2 до n.
2. Вычеркнем из набора (отсеим) все числа делящиеся на 2, кроме 2.
3. Перейдем к следующему «не отсеянному» числу — 3, снова вычеркиваем все что делится на 3.
4. Переходим к следующему оставшемуся числу — 5 и так далее до тех пор пока мы не дойдем до n.
5. После выполнения вышеописанных действий, в изначальном списке останутся только простые числа. */

// За счёт чего достигается небольшая оптимизация, примененная в этом алгоритме.
/* На шаге № 2-4 числа можно зачеркивать, начиная сразу с числа p*p, потому что все меньшие числа,
кратные p, обязательно имеют простой делитель меньше p, и они уже будут зачеркнуты к этому времени.
И, соответственно, останавливать алгоритм можно, когда p*p станет больше, чем n.
Кроме того, все простые числа, кроме 2, — нечётные числа, и поэтому для них можно считать шагами по 2p,
начиная с p*p. */

unsigned char *perfom_soe(unsigned long &limit)
{
    unsigned char *is_prime;
    is_prime = (unsigned char *)calloc(limit / 8 + 1, sizeof(char));

    for (unsigned long i = 2; i * i <= limit; i++)
    {
        if(!GET_BIT(is_prime, i))
        {
            unsigned long j = i * i;
            while (j <= limit)
            {
                SET_BIT_ONE(is_prime, j);
                j = j + i;
            }
        }
    }

    SET_BIT_ONE(is_prime, 0);
    SET_BIT_ONE(is_prime, 1);

    return is_prime;
}

